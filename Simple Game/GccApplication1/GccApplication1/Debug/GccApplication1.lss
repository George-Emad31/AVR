
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000b6  008000b6  000009ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018c7  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d04  00000000  00000000  00002dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00003db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c94  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3b       	cpi	r26, 0xBF	; 191
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 03 	call	0x758	; 0x758 <main>
  8a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
	DIO_write(portname,5,READ_BIT(numberValue,5));
	DIO_write(portname,6,READ_BIT(numberValue,6));
	DIO_write(portname,7,READ_BIT(numberValue,7));
	
	
}
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8read>:
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	e9 f0       	breq	.+58     	; 0x290 <DIO_u8read+0x3e>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_u8read+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_u8read+0x16>
 25c:	55 c0       	rjmp	.+170    	; 0x308 <DIO_u8read+0xb6>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	59 f1       	breq	.+86     	; 0x2b8 <DIO_u8read+0x66>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	e9 f1       	breq	.+122    	; 0x2e0 <DIO_u8read+0x8e>
 266:	50 c0       	rjmp	.+160    	; 0x308 <DIO_u8read+0xb6>
 268:	49 b3       	in	r20, 0x19	; 25
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	06 2e       	mov	r0, r22
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8read+0x26>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8read+0x22>
 27c:	84 2f       	mov	r24, r20
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	82 23       	and	r24, r18
 282:	93 23       	and	r25, r19
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_u8read+0x38>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_u8read+0x34>
 28e:	08 95       	ret
 290:	46 b3       	in	r20, 0x16	; 22
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	9c 01       	movw	r18, r24
 298:	06 2e       	mov	r0, r22
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8read+0x4e>
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8read+0x4a>
 2a4:	84 2f       	mov	r24, r20
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 23       	and	r24, r18
 2aa:	93 23       	and	r25, r19
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_u8read+0x60>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_u8read+0x5c>
 2b6:	08 95       	ret
 2b8:	43 b3       	in	r20, 0x13	; 19
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9c 01       	movw	r18, r24
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x76>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x72>
 2cc:	84 2f       	mov	r24, r20
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	82 23       	and	r24, r18
 2d2:	93 23       	and	r25, r19
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_u8read+0x88>
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_u8read+0x84>
 2de:	08 95       	ret
 2e0:	40 b3       	in	r20, 0x10	; 16
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9c 01       	movw	r18, r24
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8read+0x9e>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8read+0x9a>
 2f4:	84 2f       	mov	r24, r20
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	82 23       	and	r24, r18
 2fa:	93 23       	and	r25, r19
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8read+0xb0>
 2fe:	95 95       	asr	r25
 300:	87 95       	ror	r24
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8read+0xac>
 306:	08 95       	ret
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret

0000030c <DIO_vconnectpullup>:
 30c:	82 34       	cpi	r24, 0x42	; 66
 30e:	19 f1       	breq	.+70     	; 0x356 <DIO_vconnectpullup+0x4a>
 310:	18 f4       	brcc	.+6      	; 0x318 <DIO_vconnectpullup+0xc>
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	39 f0       	breq	.+14     	; 0x324 <DIO_vconnectpullup+0x18>
 316:	08 95       	ret
 318:	83 34       	cpi	r24, 0x43	; 67
 31a:	b1 f1       	breq	.+108    	; 0x388 <DIO_vconnectpullup+0x7c>
 31c:	84 34       	cpi	r24, 0x44	; 68
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_vconnectpullup+0x16>
 320:	4c c0       	rjmp	.+152    	; 0x3ba <DIO_vconnectpullup+0xae>
 322:	08 95       	ret
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	59 f4       	brne	.+22     	; 0x33e <DIO_vconnectpullup+0x32>
 328:	2b b3       	in	r18, 0x1b	; 27
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_vconnectpullup+0x28>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_vconnectpullup+0x24>
 338:	82 2b       	or	r24, r18
 33a:	8b bb       	out	0x1b, r24	; 27
 33c:	08 95       	ret
 33e:	2b b3       	in	r18, 0x1b	; 27
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vconnectpullup+0x3e>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vconnectpullup+0x3a>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	8b bb       	out	0x1b, r24	; 27
 354:	08 95       	ret
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_vconnectpullup+0x64>
 35a:	28 b3       	in	r18, 0x18	; 24
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_vconnectpullup+0x5a>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_vconnectpullup+0x56>
 36a:	82 2b       	or	r24, r18
 36c:	88 bb       	out	0x18, r24	; 24
 36e:	08 95       	ret
 370:	28 b3       	in	r18, 0x18	; 24
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_vconnectpullup+0x70>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_vconnectpullup+0x6c>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	88 bb       	out	0x18, r24	; 24
 386:	08 95       	ret
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <DIO_vconnectpullup+0x96>
 38c:	25 b3       	in	r18, 0x15	; 21
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_vconnectpullup+0x8c>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_vconnectpullup+0x88>
 39c:	82 2b       	or	r24, r18
 39e:	85 bb       	out	0x15, r24	; 21
 3a0:	08 95       	ret
 3a2:	25 b3       	in	r18, 0x15	; 21
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_vconnectpullup+0xa2>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_vconnectpullup+0x9e>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	08 95       	ret
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <DIO_vconnectpullup+0xc8>
 3be:	22 b3       	in	r18, 0x12	; 18
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_vconnectpullup+0xbe>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_vconnectpullup+0xba>
 3ce:	82 2b       	or	r24, r18
 3d0:	82 bb       	out	0x12, r24	; 18
 3d2:	08 95       	ret
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_vconnectpullup+0xd4>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_vconnectpullup+0xd0>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	82 bb       	out	0x12, r24	; 18
 3ea:	08 95       	ret

000003ec <write_high_nibble>:
void write_high_nibble(unsigned char portname,unsigned char numberValue)
{
	numberValue<<=4;
 3ec:	62 95       	swap	r22
 3ee:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 3f0:	82 34       	cpi	r24, 0x42	; 66
 3f2:	79 f0       	breq	.+30     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3f4:	18 f4       	brcc	.+6      	; 0x3fc <write_high_nibble+0x10>
 3f6:	81 34       	cpi	r24, 0x41	; 65
 3f8:	31 f0       	breq	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fa:	08 95       	ret
 3fc:	83 34       	cpi	r24, 0x43	; 67
 3fe:	79 f0       	breq	.+30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 400:	84 34       	cpi	r24, 0x44	; 68
 402:	99 f0       	breq	.+38     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 404:	08 95       	ret
	{
		case 'A':
		PORTA&=0x0f;
 406:	8b b3       	in	r24, 0x1b	; 27
 408:	8f 70       	andi	r24, 0x0F	; 15
 40a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=numberValue;
 40c:	8b b3       	in	r24, 0x1b	; 27
 40e:	86 2b       	or	r24, r22
 410:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 412:	88 b3       	in	r24, 0x18	; 24
 414:	8f 70       	andi	r24, 0x0F	; 15
 416:	88 bb       	out	0x18, r24	; 24
		PORTB|=numberValue;
 418:	88 b3       	in	r24, 0x18	; 24
 41a:	86 2b       	or	r24, r22
 41c:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 41e:	85 b3       	in	r24, 0x15	; 21
 420:	8f 70       	andi	r24, 0x0F	; 15
 422:	85 bb       	out	0x15, r24	; 21
		PORTC|=numberValue;
 424:	85 b3       	in	r24, 0x15	; 21
 426:	86 2b       	or	r24, r22
 428:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 42a:	82 b3       	in	r24, 0x12	; 18
 42c:	8f 70       	andi	r24, 0x0F	; 15
 42e:	82 bb       	out	0x12, r24	; 18
		PORTD|=numberValue;
 430:	82 b3       	in	r24, 0x12	; 18
 432:	68 2b       	or	r22, r24
 434:	62 bb       	out	0x12, r22	; 18
 436:	08 95       	ret

00000438 <keypad_vInit>:
 #include "keypad_driver.h"
 #define KPD_ROWS_PORT 'D'
 #define KPD_COLS_PORT 'D'
 void keypad_vInit()
 {    // ROWS  -> OUTPUT 
	 DIO_vsetPINDir(KPD_ROWS_PORT,KPD_ROW0_PIN,DIO_PIN_OUTPUT);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	84 e4       	ldi	r24, 0x44	; 68
 43e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir(KPD_ROWS_PORT,KPD_ROW1_PIN,DIO_PIN_OUTPUT);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	84 e4       	ldi	r24, 0x44	; 68
 448:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir(KPD_ROWS_PORT,KPD_ROW2_PIN,DIO_PIN_OUTPUT);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	84 e4       	ldi	r24, 0x44	; 68
 452:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir(KPD_ROWS_PORT,KPD_ROW3_PIN,DIO_PIN_OUTPUT);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	84 e4       	ldi	r24, 0x44	; 68
 45c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 // COL -> INPUT
	 DIO_vsetPINDir(KPD_COLS_PORT,KPD_COL0_PIN,DIO_PIN_INPUT);
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	64 e0       	ldi	r22, 0x04	; 4
 464:	84 e4       	ldi	r24, 0x44	; 68
 466:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir(KPD_COLS_PORT,KPD_COL1_PIN,DIO_PIN_INPUT);
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	65 e0       	ldi	r22, 0x05	; 5
 46e:	84 e4       	ldi	r24, 0x44	; 68
 470:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir(KPD_COLS_PORT,KPD_COL2_PIN,DIO_PIN_INPUT);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	66 e0       	ldi	r22, 0x06	; 6
 478:	84 e4       	ldi	r24, 0x44	; 68
 47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir(KPD_COLS_PORT,KPD_COL3_PIN,DIO_PIN_INPUT);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	84 e4       	ldi	r24, 0x44	; 68
 484:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 // COL -> INPUT + ACTIVE INTERNAL PULLUP
	 DIO_vconnectpullup(KPD_COLS_PORT,KPD_COL0_PIN,DIO_PIN_HIGH);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	84 e4       	ldi	r24, 0x44	; 68
 48e:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
	 DIO_vconnectpullup(KPD_COLS_PORT,KPD_COL1_PIN,DIO_PIN_HIGH);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	65 e0       	ldi	r22, 0x05	; 5
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
	 DIO_vconnectpullup(KPD_COLS_PORT,KPD_COL2_PIN,DIO_PIN_HIGH);
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	66 e0       	ldi	r22, 0x06	; 6
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
	 DIO_vconnectpullup(KPD_COLS_PORT,KPD_COL3_PIN,DIO_PIN_HIGH);
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	67 e0       	ldi	r22, 0x07	; 7
 4aa:	84 e4       	ldi	r24, 0x44	; 68
 4ac:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_vconnectpullup>
 4b0:	08 95       	ret

000004b2 <keypad_u8check_press>:
	  
 }
 u8 keypad_u8check_press()
{
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	60 97       	sbiw	r28, 0x10	; 16
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
	 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	e0 e6       	ldi	r30, 0x60	; 96
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	de 01       	movw	r26, r28
 4d4:	11 96       	adiw	r26, 0x01	; 1
 4d6:	01 90       	ld	r0, Z+
 4d8:	0d 92       	st	X+, r0
 4da:	8a 95       	dec	r24
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <keypad_u8check_press+0x24>
	 u8 row,coloumn;
	// u8 x;
	 u8 returnval=NOTPRESSED;
 4de:	ff 24       	eor	r15, r15
 4e0:	fa 94       	dec	r15
	 for(row=0;row<=3;row++)
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	38 c0       	rjmp	.+112    	; 0x556 <keypad_u8check_press+0xa4>
	 {   // ROWS  -> OUTPUT WITH LOGIC 1
		DIO_write(KPD_ROWS_PORT,KPD_ROW0_PIN,DIO_PIN_HIGH);
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	84 e4       	ldi	r24, 0x44	; 68
 4ec:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(KPD_ROWS_PORT,KPD_ROW1_PIN,DIO_PIN_HIGH);
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	84 e4       	ldi	r24, 0x44	; 68
 4f6:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(KPD_ROWS_PORT,KPD_ROW2_PIN,DIO_PIN_HIGH);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	84 e4       	ldi	r24, 0x44	; 68
 500:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(KPD_ROWS_PORT,KPD_ROW3_PIN,DIO_PIN_HIGH);
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	84 e4       	ldi	r24, 0x44	; 68
 50a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		// INTIRATION FOR ROW CHECK
		DIO_write(KPD_ROWS_PORT,row,DIO_PIN_LOW);
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	60 2f       	mov	r22, r16
 512:	84 e4       	ldi	r24, 0x44	; 68
 514:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	
		for(coloumn=0;coloumn<=3;coloumn++)
 518:	10 e0       	ldi	r17, 0x00	; 0
 51a:	18 c0       	rjmp	.+48     	; 0x54c <keypad_u8check_press+0x9a>
		{
			//x=DIO_u8read('D',(coloumn+KPD_COL0_PIN)); 
			// IF THE PIN OF FIRST COL IS CONNECTED FROM PIN 4 IF NOT IT WILL + 0
			if(DIO_u8read(KPD_COLS_PORT,(coloumn+KPD_COL0_PIN))==PRESSED)
 51c:	64 e0       	ldi	r22, 0x04	; 4
 51e:	61 0f       	add	r22, r17
 520:	84 e4       	ldi	r24, 0x44	; 68
 522:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
 526:	81 11       	cpse	r24, r1
 528:	10 c0       	rjmp	.+32     	; 0x54a <keypad_u8check_press+0x98>
			 {
				 returnval=arr[row][coloumn];
 52a:	e0 2f       	mov	r30, r16
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	8c 0f       	add	r24, r28
 53c:	9d 1f       	adc	r25, r29
 53e:	e8 0f       	add	r30, r24
 540:	f9 1f       	adc	r31, r25
 542:	e1 0f       	add	r30, r17
 544:	f1 1d       	adc	r31, r1
 546:	f0 80       	ld	r15, Z
				 break;
 548:	03 c0       	rjmp	.+6      	; 0x550 <keypad_u8check_press+0x9e>
		DIO_write(KPD_ROWS_PORT,KPD_ROW2_PIN,DIO_PIN_HIGH);
		DIO_write(KPD_ROWS_PORT,KPD_ROW3_PIN,DIO_PIN_HIGH);
		// INTIRATION FOR ROW CHECK
		DIO_write(KPD_ROWS_PORT,row,DIO_PIN_LOW);
	
		for(coloumn=0;coloumn<=3;coloumn++)
 54a:	1f 5f       	subi	r17, 0xFF	; 255
 54c:	14 30       	cpi	r17, 0x04	; 4
 54e:	30 f3       	brcs	.-52     	; 0x51c <keypad_u8check_press+0x6a>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }  
		}	
     		if(returnval==PRESSED)
 550:	ff 20       	and	r15, r15
 552:	19 f0       	breq	.+6      	; 0x55a <keypad_u8check_press+0xa8>
{
	 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 u8 row,coloumn;
	// u8 x;
	 u8 returnval=NOTPRESSED;
	 for(row=0;row<=3;row++)
 554:	0f 5f       	subi	r16, 0xFF	; 255
 556:	04 30       	cpi	r16, 0x04	; 4
 558:	30 f2       	brcs	.-116    	; 0x4e6 <keypad_u8check_press+0x34>
	     	 {  // BREAK ROM MAIN FOR LOOP
			break;
		     }
	}	 
	 return returnval ;	 
 55a:	8f 2d       	mov	r24, r15
 55c:	60 96       	adiw	r28, 0x10	; 16
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	08 95       	ret

00000574 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write(Cmd_port,EN,DIO_PIN_HIGH);
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	82 e4       	ldi	r24, 0x42	; 66
 57a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57e:	8f e9       	ldi	r24, 0x9F	; 159
 580:	9f e0       	ldi	r25, 0x0F	; 15
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <send_falling_edge+0xe>
 586:	00 c0       	rjmp	.+0      	; 0x588 <send_falling_edge+0x14>
 588:	00 00       	nop
	_delay_ms(2);
	DIO_write(Cmd_port,EN,DIO_PIN_LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e4       	ldi	r24, 0x42	; 66
 590:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <send_falling_edge+0x24>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <send_falling_edge+0x2a>
 59e:	00 00       	nop
 5a0:	08 95       	ret

000005a2 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
 5a2:	cf 93       	push	r28
 5a4:	c8 2f       	mov	r28, r24
	DIO_write_port(Data_port,cmd);
	DIO_write(Cmd_port,RS,Rs_Cmd);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble(Data_port,cmd>>4);
 5a6:	68 2f       	mov	r22, r24
 5a8:	62 95       	swap	r22
 5aa:	6f 70       	andi	r22, 0x0F	; 15
 5ac:	81 e4       	ldi	r24, 0x41	; 65
 5ae:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
	DIO_write(Cmd_port,RS,Rs_Cmd);
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	82 e4       	ldi	r24, 0x42	; 66
 5b8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 5bc:	0e 94 ba 02 	call	0x574	; 0x574 <send_falling_edge>
	write_high_nibble(Data_port,cmd);
 5c0:	6c 2f       	mov	r22, r28
 5c2:	81 e4       	ldi	r24, 0x41	; 65
 5c4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
	DIO_write(Cmd_port,RS,Rs_Cmd);
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	82 e4       	ldi	r24, 0x42	; 66
 5ce:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 5d2:	0e 94 ba 02 	call	0x574	; 0x574 <send_falling_edge>
 5d6:	8f ec       	ldi	r24, 0xCF	; 207
 5d8:	97 e0       	ldi	r25, 0x07	; 7
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <LCD_vSend_cmd+0x38>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <LCD_vSend_cmd+0x3e>
 5e0:	00 00       	nop
	#endif
	_delay_ms(1);
}
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <LCD_vInit>:
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
 5e8:	81 ee       	ldi	r24, 0xE1	; 225
 5ea:	94 e0       	ldi	r25, 0x04	; 4
 5ec:	21 50       	subi	r18, 0x01	; 1
 5ee:	80 40       	sbci	r24, 0x00	; 0
 5f0:	90 40       	sbci	r25, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <LCD_vInit+0x6>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <LCD_vInit+0x10>
 5f6:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir(Data_port,DIO_PIN4,DIO_PIN_OUTPUT);
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	64 e0       	ldi	r22, 0x04	; 4
 5fc:	81 e4       	ldi	r24, 0x41	; 65
 5fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(Data_port,DIO_PIN5,DIO_PIN_OUTPUT);
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	81 e4       	ldi	r24, 0x41	; 65
 608:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(Data_port,DIO_PIN6,DIO_PIN_OUTPUT);
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	66 e0       	ldi	r22, 0x06	; 6
 610:	81 e4       	ldi	r24, 0x41	; 65
 612:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(Data_port,DIO_PIN7,DIO_PIN_OUTPUT);
 616:	41 e0       	ldi	r20, 0x01	; 1
 618:	67 e0       	ldi	r22, 0x07	; 7
 61a:	81 e4       	ldi	r24, 0x41	; 65
 61c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(Cmd_port,EN,DIO_PIN_OUTPUT);
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	82 e4       	ldi	r24, 0x42	; 66
 626:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(Cmd_port,RW,DIO_PIN_OUTPUT);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	62 e0       	ldi	r22, 0x02	; 2
 62e:	82 e4       	ldi	r24, 0x42	; 66
 630:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(Cmd_port,RS,DIO_PIN_OUTPUT);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	82 e4       	ldi	r24, 0x42	; 66
 63a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   	DIO_write(Cmd_port,RW,DIO_PIN_LOW);
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	62 e0       	ldi	r22, 0x02	; 2
 642:	82 e4       	ldi	r24, 0x42	; 66
 644:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 64e:	8f e1       	ldi	r24, 0x1F	; 31
 650:	9e e4       	ldi	r25, 0x4E	; 78
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <LCD_vInit+0x6c>
 656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_vInit+0x72>
 658:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 65a:	88 e2       	ldi	r24, 0x28	; 40
 65c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 660:	8f ec       	ldi	r24, 0xCF	; 207
 662:	97 e0       	ldi	r25, 0x07	; 7
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <LCD_vInit+0x7e>
 668:	00 c0       	rjmp	.+0      	; 0x66a <LCD_vInit+0x84>
 66a:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAY_ON);//display on cursor on
 66c:	8c e0       	ldi	r24, 0x0C	; 12
 66e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 672:	8f ec       	ldi	r24, 0xCF	; 207
 674:	97 e0       	ldi	r25, 0x07	; 7
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_vInit+0x90>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_vInit+0x96>
 67c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 684:	8f e1       	ldi	r24, 0x1F	; 31
 686:	9e e4       	ldi	r25, 0x4E	; 78
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_vInit+0xa2>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <LCD_vInit+0xa8>
 68e:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 690:	86 e0       	ldi	r24, 0x06	; 6
 692:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 696:	8f ec       	ldi	r24, 0xCF	; 207
 698:	97 e0       	ldi	r25, 0x07	; 7
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_vInit+0xb4>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_vInit+0xba>
 6a0:	00 00       	nop
 6a2:	08 95       	ret

000006a4 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 6a4:	cf 93       	push	r28
 6a6:	c8 2f       	mov	r28, r24
	DIO_write_port(Data_port,data);
	DIO_write(Cmd_port,RS,Rs_Data);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble(Data_port,data>>4);
 6a8:	68 2f       	mov	r22, r24
 6aa:	62 95       	swap	r22
 6ac:	6f 70       	andi	r22, 0x0F	; 15
 6ae:	81 e4       	ldi	r24, 0x41	; 65
 6b0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
	DIO_write(Cmd_port,RS,Rs_Data);
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	82 e4       	ldi	r24, 0x42	; 66
 6ba:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 6be:	0e 94 ba 02 	call	0x574	; 0x574 <send_falling_edge>
	write_high_nibble(Data_port,data);
 6c2:	6c 2f       	mov	r22, r28
 6c4:	81 e4       	ldi	r24, 0x41	; 65
 6c6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <write_high_nibble>
	DIO_write(Cmd_port,RS,Rs_Data);
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	82 e4       	ldi	r24, 0x42	; 66
 6d0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 6d4:	0e 94 ba 02 	call	0x574	; 0x574 <send_falling_edge>
 6d8:	8f ec       	ldi	r24, 0xCF	; 207
 6da:	97 e0       	ldi	r25, 0x07	; 7
 6dc:	01 97       	sbiw	r24, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <LCD_vSend_char+0x38>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <LCD_vSend_char+0x3e>
 6e2:	00 00       	nop
	#endif
	_delay_ms(1);
}
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 6f0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vSend_char>
		data++;
 6f4:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 6f6:	88 81       	ld	r24, Y
 6f8:	81 11       	cpse	r24, r1
 6fa:	fa cf       	rjmp	.-12     	; 0x6f0 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 708:	8f e1       	ldi	r24, 0x1F	; 31
 70a:	9e e4       	ldi	r25, 0x4E	; 78
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <LCD_clearscreen+0xa>
 710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_clearscreen+0x10>
 712:	00 00       	nop
 714:	08 95       	ret

00000716 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 716:	9f ef       	ldi	r25, 0xFF	; 255
 718:	98 0f       	add	r25, r24
 71a:	92 30       	cpi	r25, 0x02	; 2
 71c:	70 f4       	brcc	.+28     	; 0x73a <LCD_movecursor+0x24>
 71e:	61 31       	cpi	r22, 0x11	; 17
 720:	70 f4       	brcc	.+28     	; 0x73e <LCD_movecursor+0x28>
 722:	66 23       	and	r22, r22
 724:	71 f0       	breq	.+28     	; 0x742 <LCD_movecursor+0x2c>
	{
		data=FIRST_ROW;
	}
	else if(row==1)
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	19 f4       	brne	.+6      	; 0x730 <LCD_movecursor+0x1a>
	{
		data=FIRST_ROW+coloumn-1 ;
 72a:	2f e7       	ldi	r18, 0x7F	; 127
 72c:	26 0f       	add	r18, r22
 72e:	0a c0       	rjmp	.+20     	; 0x744 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 730:	82 30       	cpi	r24, 0x02	; 2
 732:	41 f4       	brne	.+16     	; 0x744 <LCD_movecursor+0x2e>
	{
		data=SECOND_ROW+coloumn-1;
 734:	2f eb       	ldi	r18, 0xBF	; 191
 736:	26 0f       	add	r18, r22
 738:	05 c0       	rjmp	.+10     	; 0x744 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=FIRST_ROW;
 73a:	20 e8       	ldi	r18, 0x80	; 128
 73c:	03 c0       	rjmp	.+6      	; 0x744 <LCD_movecursor+0x2e>
 73e:	20 e8       	ldi	r18, 0x80	; 128
 740:	01 c0       	rjmp	.+2      	; 0x744 <LCD_movecursor+0x2e>
 742:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=SECOND_ROW+coloumn-1;
	}
	LCD_vSend_cmd(data);
 744:	82 2f       	mov	r24, r18
 746:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_vSend_cmd>
 74a:	8f ec       	ldi	r24, 0xCF	; 207
 74c:	97 e0       	ldi	r25, 0x07	; 7
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <LCD_movecursor+0x38>
 752:	00 c0       	rjmp	.+0      	; 0x754 <LCD_movecursor+0x3e>
 754:	00 00       	nop
 756:	08 95       	ret

00000758 <main>:
volatile int flag_1=0,flag_2=0;
volatile int flag=0,flag_3=0;

int main(void)
{     
   clk_1024();
 758:	0e 94 53 04 	call	0x8a6	; 0x8a6 <clk_1024>
   LCD_vInit();
 75c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_vInit>
   timer_CTC_init_interrupt(78);
 760:	8e e4       	ldi	r24, 0x4E	; 78
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 47 04 	call	0x88e	; 0x88e <timer_CTC_init_interrupt>
   keypad_vInit();
 768:	0e 94 1c 02 	call	0x438	; 0x438 <keypad_vInit>
   LCD_movecursor(1,4);
 76c:	64 e0       	ldi	r22, 0x04	; 4
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_movecursor>
   LCD_vSend_string("WELCOME TO");
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
   LCD_movecursor(2,4);
 77c:	64 e0       	ldi	r22, 0x04	; 4
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_movecursor>
LCD_vSend_string("THE GAME");
 784:	8b e7       	ldi	r24, 0x7B	; 123
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
do
{
	if(flag>=250) // 10000*10->80 means each 10 ms it goes to ISR
 78c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <flag>
 790:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <flag+0x1>
 794:	8a 3f       	cpi	r24, 0xFA	; 250
 796:	91 05       	cpc	r25, r1
 798:	44 f0       	brlt	.+16     	; 0x7aa <main+0x52>
	{
      LCD_clearscreen();
 79a:	0e 94 81 03 	call	0x702	; 0x702 <LCD_clearscreen>
	  flag_3=1;
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <__data_end+0x1>
 7a6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
	}
}
while (flag_3==0);
 7aa:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
 7ae:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x1>
 7b2:	89 2b       	or	r24, r25
 7b4:	59 f3       	breq	.-42     	; 0x78c <main+0x34>
   LCD_vSend_string("3+?=8");
 7b6:	84 e8       	ldi	r24, 0x84	; 132
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
do  
{  
	if(flag_1>=1000) // 10000*10->80 means each 10 ms it goes to ISR 
 7be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <flag_1>
 7c2:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <flag_1+0x1>
 7c6:	88 3e       	cpi	r24, 0xE8	; 232
 7c8:	93 40       	sbci	r25, 0x03	; 3
 7ca:	34 f0       	brlt	.+12     	; 0x7d8 <main+0x80>
	{
	flag_2=1; // if passed 10 second flag is up
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <flag_2+0x1>
 7d4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <flag_2>
	}
	x=keypad_u8check_press();
 7d8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_u8check_press>
 7dc:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <x>
}
 while (x==NOTPRESSED && flag_2==0); // while NOTPRESSED and not reach to 10 second
 7e0:	8f 3f       	cpi	r24, 0xFF	; 255
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <main+0x98>
 7e4:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <flag_2>
 7e8:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <flag_2+0x1>
 7ec:	23 2b       	or	r18, r19
 7ee:	39 f3       	breq	.-50     	; 0x7be <main+0x66>
 
	 if (x=='5')
 7f0:	85 33       	cpi	r24, 0x35	; 53
 7f2:	59 f4       	brne	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	 {
	  LCD_clearscreen();
 7f4:	0e 94 81 03 	call	0x702	; 0x702 <LCD_clearscreen>
	  LCD_movecursor(2,4);
 7f8:	64 e0       	ldi	r22, 0x04	; 4
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_movecursor>
	  LCD_vSend_string("Well Done");
 800:	8a e8       	ldi	r24, 0x8A	; 138
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
 808:	1f c0       	rjmp	.+62     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	 } 
	 else if (x==NOTPRESSED)
 80a:	8f 3f       	cpi	r24, 0xFF	; 255
 80c:	59 f4       	brne	.+22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	 {
		   LCD_clearscreen();
 80e:	0e 94 81 03 	call	0x702	; 0x702 <LCD_clearscreen>
		   LCD_movecursor(2,4);
 812:	64 e0       	ldi	r22, 0x04	; 4
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_movecursor>
		   LCD_vSend_string("Time over");
 81a:	84 e9       	ldi	r24, 0x94	; 148
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
 822:	12 c0       	rjmp	.+36     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		
	 }
 	 else 
	  {
		 LCD_clearscreen();
 824:	0e 94 81 03 	call	0x702	; 0x702 <LCD_clearscreen>
		 LCD_movecursor(1,4);
 828:	64 e0       	ldi	r22, 0x04	; 4
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_movecursor>
		 LCD_vSend_string("WRONG ANSWER");
 830:	8e e9       	ldi	r24, 0x9E	; 158
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
		 LCD_movecursor(2,4);
 838:	64 e0       	ldi	r22, 0x04	; 4
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_movecursor>
		 LCD_vSend_string("GAME OVER");
 840:	8b ea       	ldi	r24, 0xAB	; 171
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_vSend_string>
	  }
}
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	08 95       	ret

0000084e <__vector_10>:
  
ISR(TIMER0_COMP_vect)
{   
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
	flag++;
 85c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <flag>
 860:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <flag+0x1>
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <flag+0x1>
 86a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <flag>
	flag_1++;
 86e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <flag_1>
 872:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <flag_1+0x1>
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <flag_1+0x1>
 87c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <flag_1>
}
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	0f 90       	pop	r0
 886:	0f be       	out	0x3f, r0	; 63
 888:	0f 90       	pop	r0
 88a:	1f 90       	pop	r1
 88c:	18 95       	reti

0000088e <timer_CTC_init_interrupt>:
{
	CLR_BIT(TCCR0,CS00);//0
	CLR_BIT(TCCR0,CS01);//0
	SET_BIT(TCCR0,CS02);//1
	return 0;
}
 88e:	93 b7       	in	r25, 0x33	; 51
 890:	9f 7b       	andi	r25, 0xBF	; 191
 892:	93 bf       	out	0x33, r25	; 51
 894:	93 b7       	in	r25, 0x33	; 51
 896:	98 60       	ori	r25, 0x08	; 8
 898:	93 bf       	out	0x33, r25	; 51
 89a:	8c bf       	out	0x3c, r24	; 60
 89c:	78 94       	sei
 89e:	89 b7       	in	r24, 0x39	; 57
 8a0:	82 60       	ori	r24, 0x02	; 2
 8a2:	89 bf       	out	0x39, r24	; 57
 8a4:	08 95       	ret

000008a6 <clk_1024>:
int clk_1024 ()
{
	SET_BIT(TCCR0,CS00);//1
 8a6:	83 b7       	in	r24, 0x33	; 51
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);//0
 8ac:	83 b7       	in	r24, 0x33	; 51
 8ae:	8d 7f       	andi	r24, 0xFD	; 253
 8b0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);//1
 8b2:	83 b7       	in	r24, 0x33	; 51
 8b4:	84 60       	ori	r24, 0x04	; 4
 8b6:	83 bf       	out	0x33, r24	; 51
	return 0;
}
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
