
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000560  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000141d  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000860  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b17  00000000  00000000  00002439  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  00002f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005df  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b74  00000000  00000000  000037a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  8a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
	DIO_write(portname,5,READ_BIT(numberValue,5));
	DIO_write(portname,6,READ_BIT(numberValue,6));
	DIO_write(portname,7,READ_BIT(numberValue,7));
	
	
}
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <write_high_nibble>:
void write_high_nibble(unsigned char portname,unsigned char numberValue)
{
	numberValue<<=4;
 252:	62 95       	swap	r22
 254:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 256:	82 34       	cpi	r24, 0x42	; 66
 258:	79 f0       	breq	.+30     	; 0x278 <write_high_nibble+0x26>
 25a:	18 f4       	brcc	.+6      	; 0x262 <write_high_nibble+0x10>
 25c:	81 34       	cpi	r24, 0x41	; 65
 25e:	31 f0       	breq	.+12     	; 0x26c <write_high_nibble+0x1a>
 260:	08 95       	ret
 262:	83 34       	cpi	r24, 0x43	; 67
 264:	79 f0       	breq	.+30     	; 0x284 <write_high_nibble+0x32>
 266:	84 34       	cpi	r24, 0x44	; 68
 268:	99 f0       	breq	.+38     	; 0x290 <write_high_nibble+0x3e>
 26a:	08 95       	ret
	{
		case 'A':
		PORTA&=0x0f;
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	8b bb       	out	0x1b, r24	; 27
		PORTA|=numberValue;
 272:	8b b3       	in	r24, 0x1b	; 27
 274:	86 2b       	or	r24, r22
 276:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	88 bb       	out	0x18, r24	; 24
		PORTB|=numberValue;
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	86 2b       	or	r24, r22
 282:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 284:	85 b3       	in	r24, 0x15	; 21
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	85 bb       	out	0x15, r24	; 21
		PORTC|=numberValue;
 28a:	85 b3       	in	r24, 0x15	; 21
 28c:	86 2b       	or	r24, r22
 28e:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 290:	82 b3       	in	r24, 0x12	; 18
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	82 bb       	out	0x12, r24	; 18
		PORTD|=numberValue;
 296:	82 b3       	in	r24, 0x12	; 18
 298:	68 2b       	or	r22, r24
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <send_falling_edge>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <send_falling_edge+0xe>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <send_falling_edge+0x14>
 2b2:	00 00       	nop
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <send_falling_edge+0x24>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <send_falling_edge+0x2a>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <LCD_vSend_cmd>:
 2cc:	cf 93       	push	r28
 2ce:	c8 2f       	mov	r28, r24
 2d0:	68 2f       	mov	r22, r24
 2d2:	62 95       	swap	r22
 2d4:	6f 70       	andi	r22, 0x0F	; 15
 2d6:	81 e4       	ldi	r24, 0x41	; 65
 2d8:	0e 94 29 01 	call	0x252	; 0x252 <write_high_nibble>
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 2e6:	0e 94 4f 01 	call	0x29e	; 0x29e <send_falling_edge>
 2ea:	6c 2f       	mov	r22, r28
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	0e 94 29 01 	call	0x252	; 0x252 <write_high_nibble>
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 2fc:	0e 94 4f 01 	call	0x29e	; 0x29e <send_falling_edge>
 300:	8f ec       	ldi	r24, 0xCF	; 207
 302:	97 e0       	ldi	r25, 0x07	; 7
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_vSend_cmd+0x38>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_vSend_cmd+0x3e>
 30a:	00 00       	nop
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <LCD_vInit>:
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	81 ee       	ldi	r24, 0xE1	; 225
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <LCD_vInit+0x6>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_vInit+0x10>
 320:	00 00       	nop
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	81 e4       	ldi	r24, 0x41	; 65
 332:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	66 e0       	ldi	r22, 0x06	; 6
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	67 e0       	ldi	r22, 0x07	; 7
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	82 e4       	ldi	r24, 0x42	; 66
 35a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	82 e4       	ldi	r24, 0x42	; 66
 364:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	82 e4       	ldi	r24, 0x42	; 66
 36e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vSend_cmd>
 378:	8f e1       	ldi	r24, 0x1F	; 31
 37a:	9e e4       	ldi	r25, 0x4E	; 78
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_vInit+0x6c>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_vInit+0x72>
 382:	00 00       	nop
 384:	88 e2       	ldi	r24, 0x28	; 40
 386:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vSend_cmd>
 38a:	8f ec       	ldi	r24, 0xCF	; 207
 38c:	97 e0       	ldi	r25, 0x07	; 7
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_vInit+0x7e>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_vInit+0x84>
 394:	00 00       	nop
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vSend_cmd>
 39c:	8f ec       	ldi	r24, 0xCF	; 207
 39e:	97 e0       	ldi	r25, 0x07	; 7
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_vInit+0x90>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_vInit+0x96>
 3a6:	00 00       	nop
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vSend_cmd>
 3ae:	8f e1       	ldi	r24, 0x1F	; 31
 3b0:	9e e4       	ldi	r25, 0x4E	; 78
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_vInit+0xa2>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_vInit+0xa8>
 3b8:	00 00       	nop
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vSend_cmd>
 3c0:	8f ec       	ldi	r24, 0xCF	; 207
 3c2:	97 e0       	ldi	r25, 0x07	; 7
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_vInit+0xb4>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_vInit+0xba>
 3ca:	00 00       	nop
 3cc:	08 95       	ret

000003ce <LCD_vSend_char>:
 3ce:	cf 93       	push	r28
 3d0:	c8 2f       	mov	r28, r24
 3d2:	68 2f       	mov	r22, r24
 3d4:	62 95       	swap	r22
 3d6:	6f 70       	andi	r22, 0x0F	; 15
 3d8:	81 e4       	ldi	r24, 0x41	; 65
 3da:	0e 94 29 01 	call	0x252	; 0x252 <write_high_nibble>
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 3e8:	0e 94 4f 01 	call	0x29e	; 0x29e <send_falling_edge>
 3ec:	6c 2f       	mov	r22, r28
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	0e 94 29 01 	call	0x252	; 0x252 <write_high_nibble>
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	82 e4       	ldi	r24, 0x42	; 66
 3fa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 3fe:	0e 94 4f 01 	call	0x29e	; 0x29e <send_falling_edge>
 402:	8f ec       	ldi	r24, 0xCF	; 207
 404:	97 e0       	ldi	r25, 0x07	; 7
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LCD_vSend_string>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
 418:	03 c0       	rjmp	.+6      	; 0x420 <LCD_vSend_string+0xe>
 41a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_char>
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	88 81       	ld	r24, Y
 422:	81 11       	cpse	r24, r1
 424:	fa cf       	rjmp	.-12     	; 0x41a <LCD_vSend_string+0x8>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	98 0f       	add	r25, r24
 430:	92 30       	cpi	r25, 0x02	; 2
 432:	70 f4       	brcc	.+28     	; 0x450 <LCD_movecursor+0x24>
 434:	61 31       	cpi	r22, 0x11	; 17
 436:	70 f4       	brcc	.+28     	; 0x454 <LCD_movecursor+0x28>
 438:	66 23       	and	r22, r22
 43a:	71 f0       	breq	.+28     	; 0x458 <LCD_movecursor+0x2c>
	{
		data=FIRST_ROW;
	}
	else if(row==1)
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	19 f4       	brne	.+6      	; 0x446 <LCD_movecursor+0x1a>
	{
		data=FIRST_ROW+coloumn-1 ;
 440:	2f e7       	ldi	r18, 0x7F	; 127
 442:	26 0f       	add	r18, r22
 444:	0a c0       	rjmp	.+20     	; 0x45a <LCD_movecursor+0x2e>
	}
	else if (row==2)
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	41 f4       	brne	.+16     	; 0x45a <LCD_movecursor+0x2e>
	{
		data=SECOND_ROW+coloumn-1;
 44a:	2f eb       	ldi	r18, 0xBF	; 191
 44c:	26 0f       	add	r18, r22
 44e:	05 c0       	rjmp	.+10     	; 0x45a <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=FIRST_ROW;
 450:	20 e8       	ldi	r18, 0x80	; 128
 452:	03 c0       	rjmp	.+6      	; 0x45a <LCD_movecursor+0x2e>
 454:	20 e8       	ldi	r18, 0x80	; 128
 456:	01 c0       	rjmp	.+2      	; 0x45a <LCD_movecursor+0x2e>
 458:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=SECOND_ROW+coloumn-1;
	}
	LCD_vSend_cmd(data);
 45a:	82 2f       	mov	r24, r18
 45c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vSend_cmd>
 460:	8f ec       	ldi	r24, 0xCF	; 207
 462:	97 e0       	ldi	r25, 0x07	; 7
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <LCD_movecursor+0x38>
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCD_movecursor+0x3e>
 46a:	00 00       	nop
 46c:	08 95       	ret

0000046e <main>:
#include "App_config.h"
 u16 x= 128;
 u8 z=0;
int main(void)
{  		
clk_1024();
 46e:	0e 94 93 02 	call	0x526	; 0x526 <clk_1024>
timer_wave_fastPWM(x);
 472:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 476:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 47a:	0e 94 82 02 	call	0x504	; 0x504 <timer_wave_fastPWM>
LCD_vInit();
 47e:	0e 94 88 01 	call	0x310	; 0x310 <LCD_vInit>
x=(x*100);
 482:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 486:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 48a:	44 e6       	ldi	r20, 0x64	; 100
 48c:	48 9f       	mul	r20, r24
 48e:	90 01       	movw	r18, r0
 490:	49 9f       	mul	r20, r25
 492:	30 0d       	add	r19, r0
 494:	11 24       	eor	r1, r1
 496:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 49a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
u8 y;
y=((u8)(x/(255)));
 49e:	a1 e8       	ldi	r26, 0x81	; 129
 4a0:	b0 e8       	ldi	r27, 0x80	; 128
 4a2:	0e 94 9f 02 	call	0x53e	; 0x53e <__umulhisi3>
 4a6:	8c 01       	movw	r16, r24
 4a8:	00 0f       	add	r16, r16
 4aa:	01 2f       	mov	r16, r17
 4ac:	00 1f       	adc	r16, r16
 4ae:	11 0b       	sbc	r17, r17
 4b0:	11 95       	neg	r17

if ((y!=100))
 4b2:	04 36       	cpi	r16, 0x64	; 100
 4b4:	f1 f0       	breq	.+60     	; 0x4f2 <main+0x84>
{
	LCD_vSend_string("Duty cycle=  %");
 4b6:	82 e6       	ldi	r24, 0x62	; 98
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 09 02 	call	0x412	; 0x412 <LCD_vSend_string>
	LCD_movecursor(1,12);
 4be:	6c e0       	ldi	r22, 0x0C	; 12
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_movecursor>
	LCD_vSend_char((y/10)+ASCII);
 4c6:	cd ec       	ldi	r28, 0xCD	; 205
 4c8:	0c 9f       	mul	r16, r28
 4ca:	c1 2d       	mov	r28, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	c6 95       	lsr	r28
 4d0:	c6 95       	lsr	r28
 4d2:	c6 95       	lsr	r28
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	8c 0f       	add	r24, r28
 4d8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_char>
	LCD_vSend_char((y%10)+ASCII);
 4dc:	cc 0f       	add	r28, r28
 4de:	8c 2f       	mov	r24, r28
 4e0:	88 0f       	add	r24, r24
 4e2:	88 0f       	add	r24, r24
 4e4:	c8 0f       	add	r28, r24
 4e6:	80 2f       	mov	r24, r16
 4e8:	8c 1b       	sub	r24, r28
 4ea:	80 5d       	subi	r24, 0xD0	; 208
 4ec:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_vSend_char>
 4f0:	08 c0       	rjmp	.+16     	; 0x502 <main+0x94>
}
else
{
	LCD_vSend_string("Duty cycle=100%");
 4f2:	81 e7       	ldi	r24, 0x71	; 113
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 09 02 	call	0x412	; 0x412 <LCD_vSend_string>
	LCD_movecursor(1,12);
 4fa:	6c e0       	ldi	r22, 0x0C	; 12
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_movecursor>
 502:	ff cf       	rjmp	.-2      	; 0x502 <main+0x94>

00000504 <timer_wave_fastPWM>:
{
	CLR_BIT(TCCR0,CS00);//0
	CLR_BIT(TCCR0,CS01);//0
	SET_BIT(TCCR0,CS02);//1
	return 0;
}
 504:	97 b3       	in	r25, 0x17	; 23
 506:	98 60       	ori	r25, 0x08	; 8
 508:	97 bb       	out	0x17, r25	; 23
 50a:	93 b7       	in	r25, 0x33	; 51
 50c:	90 64       	ori	r25, 0x40	; 64
 50e:	93 bf       	out	0x33, r25	; 51
 510:	93 b7       	in	r25, 0x33	; 51
 512:	98 60       	ori	r25, 0x08	; 8
 514:	93 bf       	out	0x33, r25	; 51
 516:	8c bf       	out	0x3c, r24	; 60
 518:	83 b7       	in	r24, 0x33	; 51
 51a:	80 61       	ori	r24, 0x10	; 16
 51c:	83 bf       	out	0x33, r24	; 51
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	80 62       	ori	r24, 0x20	; 32
 522:	83 bf       	out	0x33, r24	; 51
 524:	08 95       	ret

00000526 <clk_1024>:
int clk_1024 ()
{
	SET_BIT(TCCR0,CS00);//1
 526:	83 b7       	in	r24, 0x33	; 51
 528:	81 60       	ori	r24, 0x01	; 1
 52a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);//0
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	8d 7f       	andi	r24, 0xFD	; 253
 530:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);//1
 532:	83 b7       	in	r24, 0x33	; 51
 534:	84 60       	ori	r24, 0x04	; 4
 536:	83 bf       	out	0x33, r24	; 51
	return 0;
}
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	08 95       	ret

0000053e <__umulhisi3>:
 53e:	a2 9f       	mul	r26, r18
 540:	b0 01       	movw	r22, r0
 542:	b3 9f       	mul	r27, r19
 544:	c0 01       	movw	r24, r0
 546:	a3 9f       	mul	r26, r19
 548:	70 0d       	add	r23, r0
 54a:	81 1d       	adc	r24, r1
 54c:	11 24       	eor	r1, r1
 54e:	91 1d       	adc	r25, r1
 550:	b2 9f       	mul	r27, r18
 552:	70 0d       	add	r23, r0
 554:	81 1d       	adc	r24, r1
 556:	11 24       	eor	r1, r1
 558:	91 1d       	adc	r25, r1
 55a:	08 95       	ret

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
