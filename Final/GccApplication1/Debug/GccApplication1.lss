
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000867  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d6  00000000  00000000  00000c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000462  00000000  00000000  00001269  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000287  00000000  00000000  00001b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_2>
   c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  74:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SevenSegment_init>:


/*                                         7 SEGMENT FUNCTION                                          */
void SevenSegment_init(void)
{
	SET_BIT(DDRC, 5);   
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(DDRA, 6);   
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	8f 7b       	andi	r24, 0xBF	; 191
  86:	8a bb       	out	0x1a, r24	; 26
    TOG_BIT(PORTC, 7);
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	80 58       	subi	r24, 0x80	; 128
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	08 95       	ret

00000090 <Timer1_init>:


/*                                         TIMER FUNCTION                                          */
void Timer1_init(void)
{
	TCNT1 = 0;  //INITIAL VALUE
  90:	1d bc       	out	0x2d, r1	; 45
  92:	1c bc       	out	0x2c, r1	; 44
	 * Timer frequency will be around 1Khz, TICK TIME = 1024us
	 * WE WANT 1 SEC
	 * 1/1024 =976 , 976 IS COMP VALUE
	 */

	OCR1A = 976; // COMP VALUE
  94:	80 ed       	ldi	r24, 0xD0	; 208
  96:	93 e0       	ldi	r25, 0x03	; 3
  98:	9b bd       	out	0x2b, r25	; 43
  9a:	8a bd       	out	0x2a, r24	; 42
	 * 2. CTC Mode WGM12=1
	 * 3. clock = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 * 4. CTC INTERRUPT OCIE1A=1
	 */

SET_BIT(TCCR1A, FOC1A);
  9c:	8f b5       	in	r24, 0x2f	; 47
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	8f bd       	out	0x2f, r24	; 47
// Set CS10, CS12, and WGM12 bits in TCCR1B
	SET_BIT(TCCR1B, CS10);
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, CS12);
  a8:	8e b5       	in	r24, 0x2e	; 46
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, WGM12);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	8e bd       	out	0x2e, r24	; 46
    SET_BIT(TIMSK, OCIE1A);
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	89 bf       	out	0x39, r24	; 57
  ba:	08 95       	ret

000000bc <Reset>:


/*                                         RESET FUNCTION                                          */
void Reset (void)
{
	CLR_BIT(DDRD, PD2);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	81 bb       	out	0x11, r24	; 17
	SET_BIT(PORTD, PD2);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	82 bb       	out	0x12, r24	; 18
    SET_BIT(GICR, INT0);
  c8:	8b b7       	in	r24, 0x3b	; 59
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCR, ISC01);
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	85 bf       	out	0x35, r24	; 53
  d4:	08 95       	ret

000000d6 <Pause>:
/*                                         PAUSE FUNCTION                                          */

void Pause(void)
{
	// Enable interrupt for INT1
	SET_BIT(GICR, INT1);
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	8b bf       	out	0x3b, r24	; 59

	// Set rising edge interrupt for INT1
	SET_BIT(MCUCR, ISC10);
  dc:	85 b7       	in	r24, 0x35	; 53
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR, ISC11);
  e2:	85 b7       	in	r24, 0x35	; 53
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	85 bf       	out	0x35, r24	; 53
  e8:	08 95       	ret

000000ea <Resume>:


void Resume (void)
{
	// Set PB2 as input pin
	CLR_BIT(DDRB, PB2);
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	87 bb       	out	0x17, r24	; 23

	// Enable internal pull up for PB2
	SET_BIT(PORTB, PB2);
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	88 bb       	out	0x18, r24	; 24

	// Enable interrupt for INT2
	SET_BIT(GICR, INT2);
  f6:	8b b7       	in	r24, 0x3b	; 59
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	8b bf       	out	0x3b, r24	; 59

	// Set falling edge interrupt for INT2
	CLR_BIT(MCUCSR, ISC2);
  fc:	84 b7       	in	r24, 0x34	; 52
  fe:	8f 7b       	andi	r24, 0xBF	; 191
 100:	84 bf       	out	0x34, r24	; 52
 102:	08 95       	ret

00000104 <SevenSegment_Display>:
/*                                         DISPLAY FUNCTION                                          */

void SevenSegment_Display(void)
{
	// Display first digit in seconds
	SET_BIT(PORTA, PA0);
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	81 60       	ori	r24, 0x01	; 1
 108:	8b bb       	out	0x1b, r24	; 27
	PORTC = seconds % 10;
 10a:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <seconds>
 10e:	9d ec       	ldi	r25, 0xCD	; 205
 110:	39 9f       	mul	r19, r25
 112:	81 2d       	mov	r24, r1
 114:	11 24       	eor	r1, r1
 116:	86 95       	lsr	r24
 118:	86 95       	lsr	r24
 11a:	86 95       	lsr	r24
 11c:	88 0f       	add	r24, r24
 11e:	28 2f       	mov	r18, r24
 120:	22 0f       	add	r18, r18
 122:	22 0f       	add	r18, r18
 124:	82 0f       	add	r24, r18
 126:	38 1b       	sub	r19, r24
 128:	35 bb       	out	0x15, r19	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	e9 ef       	ldi	r30, 0xF9	; 249
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <SevenSegment_Display+0x2a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <SevenSegment_Display+0x30>
 134:	00 00       	nop
	_delay_ms(1);

	// Display second digit in seconds
	SET_BIT(PORTA, PA1);
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	8b bb       	out	0x1b, r24	; 27
	PORTC = seconds / 10;
 13c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <seconds>
 140:	89 9f       	mul	r24, r25
 142:	81 2d       	mov	r24, r1
 144:	11 24       	eor	r1, r1
 146:	86 95       	lsr	r24
 148:	86 95       	lsr	r24
 14a:	86 95       	lsr	r24
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	e9 ef       	ldi	r30, 0xF9	; 249
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <SevenSegment_Display+0x4e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <SevenSegment_Display+0x54>
 158:	00 00       	nop
	_delay_ms(1);

	// Display first digit in minutes
	SET_BIT(PORTA, PA2);
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	8b bb       	out	0x1b, r24	; 27
	PORTC = minutes % 10;
 160:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <minutes>
 164:	39 9f       	mul	r19, r25
 166:	81 2d       	mov	r24, r1
 168:	11 24       	eor	r1, r1
 16a:	86 95       	lsr	r24
 16c:	86 95       	lsr	r24
 16e:	86 95       	lsr	r24
 170:	88 0f       	add	r24, r24
 172:	28 2f       	mov	r18, r24
 174:	22 0f       	add	r18, r18
 176:	22 0f       	add	r18, r18
 178:	82 0f       	add	r24, r18
 17a:	38 1b       	sub	r19, r24
 17c:	35 bb       	out	0x15, r19	; 21
 17e:	e9 ef       	ldi	r30, 0xF9	; 249
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <SevenSegment_Display+0x7e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <SevenSegment_Display+0x84>
 188:	00 00       	nop
	_delay_ms(1);

	// Display second digit in minutes
	SET_BIT(PORTA, PA3);
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	8b bb       	out	0x1b, r24	; 27
	PORTC = minutes / 10;
 190:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
 194:	89 9f       	mul	r24, r25
 196:	81 2d       	mov	r24, r1
 198:	11 24       	eor	r1, r1
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	86 95       	lsr	r24
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	e9 ef       	ldi	r30, 0xF9	; 249
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <SevenSegment_Display+0xa2>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <SevenSegment_Display+0xa8>
 1ac:	00 00       	nop
	_delay_ms(1);

	// Display first digit in hours
	SET_BIT(PORTA, PA4);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	8b bb       	out	0x1b, r24	; 27
	PORTC = hours % 10;
 1b4:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	39 9f       	mul	r19, r25
 1ba:	81 2d       	mov	r24, r1
 1bc:	11 24       	eor	r1, r1
 1be:	86 95       	lsr	r24
 1c0:	86 95       	lsr	r24
 1c2:	86 95       	lsr	r24
 1c4:	88 0f       	add	r24, r24
 1c6:	28 2f       	mov	r18, r24
 1c8:	22 0f       	add	r18, r18
 1ca:	22 0f       	add	r18, r18
 1cc:	82 0f       	add	r24, r18
 1ce:	38 1b       	sub	r19, r24
 1d0:	35 bb       	out	0x15, r19	; 21
 1d2:	e9 ef       	ldi	r30, 0xF9	; 249
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <SevenSegment_Display+0xd2>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <SevenSegment_Display+0xd8>
 1dc:	00 00       	nop
	_delay_ms(1);

	// Display second digit in hours
	SET_BIT(PORTA, PA5);
 1de:	8b b3       	in	r24, 0x1b	; 27
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	8b bb       	out	0x1b, r24	; 27
	PORTC = hours / 10;
 1e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e8:	89 9f       	mul	r24, r25
 1ea:	91 2d       	mov	r25, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	96 95       	lsr	r25
 1f0:	96 95       	lsr	r25
 1f2:	96 95       	lsr	r25
 1f4:	95 bb       	out	0x15, r25	; 21
 1f6:	89 ef       	ldi	r24, 0xF9	; 249
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <SevenSegment_Display+0xf6>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <SevenSegment_Display+0xfc>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <__vector_7>:



/*                                         TIMER1 INTERRUPT                                          */
ISR (TIMER1_COMPA_vect)  // STOP WATCH INCREAMENT
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
	seconds++;
 210:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <seconds>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <seconds>

	if (seconds == 60)
 21a:	8c 33       	cpi	r24, 0x3C	; 60
 21c:	39 f4       	brne	.+14     	; 0x22c <__vector_7+0x28>
	{
		minutes++;
 21e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <minutes>
		seconds=0;
 228:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <seconds>
	}

	if (minutes == 60)
 22c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
 230:	8c 33       	cpi	r24, 0x3C	; 60
 232:	39 f4       	brne	.+14     	; 0x242 <__vector_7+0x3e>
	{
		hours++;
 234:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		minutes=0;
 23e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <minutes>
	}
}
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_1>:



/*                                         INT0 INTERRUPT                                          */
ISR (INT0_vect)  // RESET BUTTOM
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
	hours = 0;
 258:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	minutes = 0;
 25c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <minutes>
	seconds = 0;
 260:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <seconds>
}
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_2>:



/*                                         INT1 INTERRUPT                                          */
ISR (INT1_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
	// Clear CS10, CS11, CS12 bits in TCCR1B to pause
	CLR_BIT(TCCR1B, CS10);
 27a:	8e b5       	in	r24, 0x2e	; 46
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B, CS11);
 280:	8e b5       	in	r24, 0x2e	; 46
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B, CS12);
 286:	8e b5       	in	r24, 0x2e	; 46
 288:	8b 7f       	andi	r24, 0xFB	; 251
 28a:	8e bd       	out	0x2e, r24	; 46
}
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_3>:



/*                                         INT2 INTERRUPT                                          */
ISR (INT2_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
	// Set CS10 and CS12 bits in TCCR1B to resume
	SET_BIT(TCCR1B, CS10);
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, CS12);
 2aa:	8e b5       	in	r24, 0x2e	; 46
 2ac:	84 60       	ori	r24, 0x04	; 4
 2ae:	8e bd       	out	0x2e, r24	; 46
}
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <main>:


/*                                         MAIN FUNCTION                                          */
int main ()
{
	SevenSegment_init(); //FUNCTION TO INITIALIZE 6-DIGIT SEVEN SEGMENT
 2bc:	0e 94 3e 00 	call	0x7c	; 0x7c <SevenSegment_init>
	sei(); // SET I-BIT
 2c0:	78 94       	sei
	Reset (); //FUNCTION TO INITIALIZE RESET BUTTOM
 2c2:	0e 94 5e 00 	call	0xbc	; 0xbc <Reset>
	Pause();  //FUNCTION TO INITIALIZE PAUSE BUTTOM
 2c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <Pause>
	Resume ();  //FUNCTION TO INITIALIZE RESUME BUTTOM
 2ca:	0e 94 75 00 	call	0xea	; 0xea <Resume>
	Timer1_init();  //FUNCTION TO INITIALIZE TIMER1 WITH COMP MODE
 2ce:	0e 94 48 00 	call	0x90	; 0x90 <Timer1_init>

	while (1)
	{
		SevenSegment_Display();  //FUNCTION TO DISPLAY 7 SEGMENT
 2d2:	0e 94 82 00 	call	0x104	; 0x104 <SevenSegment_Display>
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <main+0x16>

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
