
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001166  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c9  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d5  00000000  00000000  00001fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bc  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009df  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  8a:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
			SET_BIT(PORTD,pinnumber);
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_set_port_direction>:



void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	59 f0       	breq	.+22     	; 0x26c <DIO_set_port_direction+0x1a>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_set_port_direction+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_set_port_direction+0x16>
 25c:	08 95       	ret
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	39 f0       	breq	.+14     	; 0x270 <DIO_set_port_direction+0x1e>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	39 f0       	breq	.+14     	; 0x274 <DIO_set_port_direction+0x22>
 266:	08 95       	ret
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 268:	6a bb       	out	0x1a, r22	; 26
		break ;
 26a:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 26c:	67 bb       	out	0x17, r22	; 23
		break ;
 26e:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 270:	64 bb       	out	0x14, r22	; 20
		break ;
 272:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 274:	61 bb       	out	0x11, r22	; 17
 276:	08 95       	ret

00000278 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 278:	82 34       	cpi	r24, 0x42	; 66
 27a:	59 f0       	breq	.+22     	; 0x292 <DIO_write_port+0x1a>
 27c:	18 f4       	brcc	.+6      	; 0x284 <DIO_write_port+0xc>
 27e:	81 34       	cpi	r24, 0x41	; 65
 280:	31 f0       	breq	.+12     	; 0x28e <DIO_write_port+0x16>
 282:	08 95       	ret
 284:	83 34       	cpi	r24, 0x43	; 67
 286:	39 f0       	breq	.+14     	; 0x296 <DIO_write_port+0x1e>
 288:	84 34       	cpi	r24, 0x44	; 68
 28a:	39 f0       	breq	.+14     	; 0x29a <DIO_write_port+0x22>
 28c:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 28e:	6b bb       	out	0x1b, r22	; 27
		break ;
 290:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 292:	68 bb       	out	0x18, r22	; 24
		break ;
 294:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 296:	65 bb       	out	0x15, r22	; 21
		break ;
 298:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <main>:
volatile u8  counter1=0; // first 7 seg
volatile u8  counter2=0;  // for 7 segment 
volatile u8  counter3=0; // second 7 seg
int main(void)
{  
	clk_1024();
 29e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <clk_1024>
	seven_seg_vinit('D');
 2a2:	84 e4       	ldi	r24, 0x44	; 68
 2a4:	0e 94 c8 01 	call	0x390	; 0x390 <seven_seg_vinit>
   timer_CTC_init_interrupt(78);
 2a8:	8e e4       	ldi	r24, 0x4E	; 78
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <timer_CTC_init_interrupt>
   // seven segment control  as Output pin
   DIO_vsetPINDir('A',1,DIO_PIN_OUTPUT);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	81 e4       	ldi	r24, 0x41	; 65
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   DIO_vsetPINDir('A',0,DIO_PIN_OUTPUT);
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	81 e4       	ldi	r24, 0x41	; 65
 2c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   
   
   while(1)
    { 
	  // 2nd seven segment
	 DIO_write('A',1,DIO_PIN_HIGH);// SET 7 SEG (2) ACTIVE
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	81 e4       	ldi	r24, 0x41	; 65
 2ca:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 DIO_write('A',0,DIO_PIN_LOW);// CLR 7 SEG (1) DISABLE
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	// WRITE ON 7 SEGMENT 
    seven_segment_write_Cathode('D',counter2%10);	   
 2d8:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <counter2>
 2dc:	8d ec       	ldi	r24, 0xCD	; 205
 2de:	68 9f       	mul	r22, r24
 2e0:	81 2d       	mov	r24, r1
 2e2:	11 24       	eor	r1, r1
 2e4:	86 95       	lsr	r24
 2e6:	86 95       	lsr	r24
 2e8:	86 95       	lsr	r24
 2ea:	88 0f       	add	r24, r24
 2ec:	98 2f       	mov	r25, r24
 2ee:	99 0f       	add	r25, r25
 2f0:	99 0f       	add	r25, r25
 2f2:	89 0f       	add	r24, r25
 2f4:	68 1b       	sub	r22, r24
 2f6:	84 e4       	ldi	r24, 0x44	; 68
 2f8:	0e 94 cc 01 	call	0x398	; 0x398 <seven_segment_write_Cathode>
	 // 1st seven segment 
    while(counter3==0);// means it reach ISR each 10 ms 
 2fc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 300:	88 23       	and	r24, r24
 302:	e1 f3       	breq	.-8      	; 0x2fc <main+0x5e>
	counter3=0;
 304:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	 DIO_write('A',0,DIO_PIN_HIGH);// SET 7 SEG (1) ACTIVE
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e4       	ldi	r24, 0x41	; 65
 30e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 DIO_write('A',1,DIO_PIN_LOW);// CLR 7 SEG (2) DISABLE
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e4       	ldi	r24, 0x41	; 65
 318:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	 // WRITE ON 7 SEGMENT
	 seven_segment_write_Cathode('D',counter2/10);
 31c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <counter2>
 320:	6d ec       	ldi	r22, 0xCD	; 205
 322:	86 9f       	mul	r24, r22
 324:	61 2d       	mov	r22, r1
 326:	11 24       	eor	r1, r1
 328:	66 95       	lsr	r22
 32a:	66 95       	lsr	r22
 32c:	66 95       	lsr	r22
 32e:	84 e4       	ldi	r24, 0x44	; 68
 330:	0e 94 cc 01 	call	0x398	; 0x398 <seven_segment_write_Cathode>
	//  1 second  check 
	while (counter3==0);
 334:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 338:	88 23       	and	r24, r24
 33a:	e1 f3       	breq	.-8      	; 0x334 <main+0x96>
		counter3=0;
 33c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		if(counter1>=100) // 1 second pass
 340:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <counter1>
 344:	84 36       	cpi	r24, 0x64	; 100
 346:	08 f4       	brcc	.+2      	; 0x34a <main+0xac>
 348:	bd cf       	rjmp	.-134    	; 0x2c4 <main+0x26>
		{
			counter1=0; // 1 second counter =0 for new second
 34a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <counter1>
		    counter2++;
 34e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <counter2>
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <counter2>
		    if(counter2==21)  // check 7 segment  count limit 
 358:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <counter2>
 35c:	85 31       	cpi	r24, 0x15	; 21
 35e:	09 f0       	breq	.+2      	; 0x362 <main+0xc4>
 360:	b1 cf       	rjmp	.-158    	; 0x2c4 <main+0x26>
		    {
			counter2=0; 
 362:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <counter2>
 366:	ae cf       	rjmp	.-164    	; 0x2c4 <main+0x26>

00000368 <__vector_10>:
  }
}


ISR(TIMER0_COMP_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	8f 93       	push	r24
counter1++;
 374:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <counter1>
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <counter1>
counter3=1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>


 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <seven_seg_vinit>:
	DIO_vsetPINDir(portname,6,1);
	DIO_vsetPINDir(portname,7,1);
	break;
	
	}
}
 390:	6f ef       	ldi	r22, 0xFF	; 255
 392:	0e 94 29 01 	call	0x252	; 0x252 <DIO_set_port_direction>
 396:	08 95       	ret

00000398 <seven_segment_write_Cathode>:



void seven_segment_write_Cathode (unsigned char portname ,unsigned char Number)
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	2a 97       	sbiw	r28, 0x0a	; 10
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
 3ac:	9a e0       	ldi	r25, 0x0A	; 10
 3ae:	e0 e6       	ldi	r30, 0x60	; 96
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	de 01       	movw	r26, r28
 3b4:	11 96       	adiw	r26, 0x01	; 1
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	9a 95       	dec	r25
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <seven_segment_write_Cathode+0x1e>
	DIO_write_port(portname,arr[Number]);
 3be:	e1 e0       	ldi	r30, 0x01	; 1
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ec 0f       	add	r30, r28
 3c4:	fd 1f       	adc	r31, r29
 3c6:	e6 0f       	add	r30, r22
 3c8:	f1 1d       	adc	r31, r1
 3ca:	60 81       	ld	r22, Z
 3cc:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_write_port>
}
 3d0:	2a 96       	adiw	r28, 0x0a	; 10
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <timer_CTC_init_interrupt>:
{
	CLR_BIT(TCCR0,CS00);//0
	CLR_BIT(TCCR0,CS01);//0
	SET_BIT(TCCR0,CS02);//1
	return 0;
}
 3e2:	93 b7       	in	r25, 0x33	; 51
 3e4:	9f 7b       	andi	r25, 0xBF	; 191
 3e6:	93 bf       	out	0x33, r25	; 51
 3e8:	93 b7       	in	r25, 0x33	; 51
 3ea:	98 60       	ori	r25, 0x08	; 8
 3ec:	93 bf       	out	0x33, r25	; 51
 3ee:	8c bf       	out	0x3c, r24	; 60
 3f0:	78 94       	sei
 3f2:	89 b7       	in	r24, 0x39	; 57
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	89 bf       	out	0x39, r24	; 57
 3f8:	08 95       	ret

000003fa <clk_1024>:
int clk_1024 ()
{
	SET_BIT(TCCR0,CS00);//1
 3fa:	83 b7       	in	r24, 0x33	; 51
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);//0
 400:	83 b7       	in	r24, 0x33	; 51
 402:	8d 7f       	andi	r24, 0xFD	; 253
 404:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);//1
 406:	83 b7       	in	r24, 0x33	; 51
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	83 bf       	out	0x33, r24	; 51
	return 0;
}
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
