
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb1  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075c  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b3  00000000  00000000  00001b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00002b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000032ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  8a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:


#include "DIO.h" 
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
	{
		
		
		case 'A':
		if(DIO_PIN_OUTPUT==direction)
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
		}
		break;
		case 'B':
		if(DIO_PIN_OUTPUT==direction)
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
		}
		break;
		case 'C':
		if(DIO_PIN_OUTPUT==direction)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
		}
		break;
		case 'D':
		if(DIO_PIN_OUTPUT==direction)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
	{
		case 'A' :
		
		if(DIO_PIN_HIGH==outputvalue)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(DIO_PIN_HIGH==outputvalue)
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(DIO_PIN_HIGH==outputvalue)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(DIO_PIN_HIGH==outputvalue)
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <LED_vInit>:

*/
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 258:	08 95       	ret

0000025a <LED_vTurnOn>:
}
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 260:	08 95       	ret

00000262 <LED_vTurnOff>:
}
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 268:	08 95       	ret

0000026a <main>:
#include <avr/interrupt.h>
//void SW_PWM(void);

int main(void)
{  
	clk_64();
 26a:	0e 94 82 01 	call	0x304	; 0x304 <clk_64>
	timer_CTC_init_interrupt(250);
 26e:	8a ef       	ldi	r24, 0xFA	; 250
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 76 01 	call	0x2ec	; 0x2ec <timer_CTC_init_interrupt>
	// isr every 1msec
	// control intinsety of 3 led using SW_PWM 
	// 25% 50% 75%
	LED_vInit('D',3);
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	84 e4       	ldi	r24, 0x44	; 68
 27a:	0e 94 29 01 	call	0x252	; 0x252 <LED_vInit>
	LED_vInit('C',2);
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	83 e4       	ldi	r24, 0x43	; 67
 282:	0e 94 29 01 	call	0x252	; 0x252 <LED_vInit>
	LED_vInit('C',7);
 286:	67 e0       	ldi	r22, 0x07	; 7
 288:	83 e4       	ldi	r24, 0x43	; 67
 28a:	0e 94 29 01 	call	0x252	; 0x252 <LED_vInit>
   sei();	
 28e:	78 94       	sei
 
   while(1)
   {	
    	static u8 counter=0;
    	counter++;
 290:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    	switch(counter)
 29a:	8a 30       	cpi	r24, 0x0A	; 10
 29c:	71 f0       	breq	.+28     	; 0x2ba <main+0x50>
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <main+0x3c>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <main+0x46>
 2a4:	f5 cf       	rjmp	.-22     	; 0x290 <main+0x26>
 2a6:	8f 30       	cpi	r24, 0x0F	; 15
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <main+0x5a>
 2aa:	84 31       	cpi	r24, 0x14	; 20
 2ac:	81 f0       	breq	.+32     	; 0x2ce <main+0x64>
 2ae:	f0 cf       	rjmp	.-32     	; 0x290 <main+0x26>
    	{
	    	case  5:LED_vTurnOff('D',3);break;
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	84 e4       	ldi	r24, 0x44	; 68
 2b4:	0e 94 31 01 	call	0x262	; 0x262 <LED_vTurnOff>
 2b8:	eb cf       	rjmp	.-42     	; 0x290 <main+0x26>
	    	case 10:LED_vTurnOff('C',2);break;
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	83 e4       	ldi	r24, 0x43	; 67
 2be:	0e 94 31 01 	call	0x262	; 0x262 <LED_vTurnOff>
 2c2:	e6 cf       	rjmp	.-52     	; 0x290 <main+0x26>
	    	case 15:LED_vTurnOff('C',7);break;
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	83 e4       	ldi	r24, 0x43	; 67
 2c8:	0e 94 31 01 	call	0x262	; 0x262 <LED_vTurnOff>
 2cc:	e1 cf       	rjmp	.-62     	; 0x290 <main+0x26>
	    	case 20:
	    	LED_vTurnOn('D',3);
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	84 e4       	ldi	r24, 0x44	; 68
 2d2:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_vTurnOn>
	    	LED_vTurnOn('C',2);
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	83 e4       	ldi	r24, 0x43	; 67
 2da:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_vTurnOn>
	    	LED_vTurnOn('C',7);
 2de:	67 e0       	ldi	r22, 0x07	; 7
 2e0:	83 e4       	ldi	r24, 0x43	; 67
 2e2:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_vTurnOn>
	    	counter=0;
 2e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	    	break;
 2ea:	d2 cf       	rjmp	.-92     	; 0x290 <main+0x26>

000002ec <timer_CTC_init_interrupt>:
{
	CLR_BIT(TCCR0,CS00);//0
	SET_BIT(TCCR0,CS01);//1
	CLR_BIT(TCCR0,CS02);//0
	return 0;
}
 2ec:	93 b7       	in	r25, 0x33	; 51
 2ee:	9f 7b       	andi	r25, 0xBF	; 191
 2f0:	93 bf       	out	0x33, r25	; 51
 2f2:	93 b7       	in	r25, 0x33	; 51
 2f4:	98 60       	ori	r25, 0x08	; 8
 2f6:	93 bf       	out	0x33, r25	; 51
 2f8:	8c bf       	out	0x3c, r24	; 60
 2fa:	78 94       	sei
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	89 bf       	out	0x39, r24	; 57
 302:	08 95       	ret

00000304 <clk_64>:
int clk_64 ()
{
	SET_BIT(TCCR0,CS00);//1
 304:	83 b7       	in	r24, 0x33	; 51
 306:	81 60       	ori	r24, 0x01	; 1
 308:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);//1
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);//0
 310:	83 b7       	in	r24, 0x33	; 51
 312:	8b 7f       	andi	r24, 0xFB	; 251
 314:	83 bf       	out	0x33, r24	; 51
	return 0;
}
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
